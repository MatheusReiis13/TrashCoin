#include <Arduino.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <Arduino_JSON.h>
#include "ESPino32CAM.h"
#include "ESPino32CAM_QRCode.h"

ESPino32CAM cam;   //Objeto para captura de imagem
ESPino32QRCode qr; //Objeto para decoficação da imagem
 
//Define os pinos da câmera
#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27
#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22
#define flash 4 

int trava = 0;
//Variável para limitar o print no monitor serial se caso o QR Code ainda estiver na frente da câmera int trava;
 

const char* SSID = "Douglas F"; // Nome da rede wifi
const char* PASSWORD = "12345678abc."; // Senha da rede wifi
String endPoint = "http://192.168.122.1:8080/"; // Url da API para consulta do cartao do aluno 
int codRetorno = 0;
String qrcode = "";
String material = "";
float peso = "";
// Função que salva o reciclado enviado o registro da pessoa, o material (ALUMINIO, PLASTICO) e o peso e retorna código http 200 se for bem sucedido ou
// 403 caso não encontre a pessoa, ou ocorra falha no registro
int salvarReciclado(String registro, String material, float peso){
  HTTPClient http;
  String url = String(endPoint + "reciclado?");
  url = String(url + "registro=");
  url = String(url + registro);
  url = String(url + "&material=");
  url = String(url + material);
  url = String(url + "&peso=");
  url = String(url + peso);
  //Serial.print("Salvando recilado: ");
  //Serial.println(url);
    if (http.begin(url.c_str())) {  // Consulta se o usuário existe no banco de dados
      int httpCode = http.POST(""); // 
      //Serial.print("Http code: ");
      //Serial.println(httpCode);
      if (httpCode > 0) { // Recupera o código HTTP de retorno da requisição
        if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY || httpCode == HTTP_CODE_CREATED) {
          String payload = http.getString();
          //Serial.println(payload);
          JSONVar json = JSON.parse(payload);
          if (JSON.typeof(json) == "undefined") {
            Serial.println("Json response undefined!");
          }
          JSONVar jsonKeys = json.keys();
          String nome = json[jsonKeys[2]];
          long credito = json[jsonKeys[4]];
          Serial.print("Nome: ");
          Serial.println(nome);
          Serial.print("Crédito: ");
          Serial.println(credito);
        }
        return httpCode;
      } else {
        Serial.printf("[HTTP] GET... falha, erro: %s\n", http.errorToString(httpCode).c_str());
      }
      http.end();
    } else {
      Serial.println("[HTTP] Impossível de conectar");
    }
    return 0;
}

void wifiConnect(){
  WiFi.begin(SSID, PASSWORD);
  Serial.print("Connectando ao WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(1000);
  }
  Serial.println(WiFi.localIP());
}

void qrcode();
{
   
  Serial.begin(115200);
  Serial.println("Leitor de QR Code");
  //Define pino do flash
  pinMode(flash,OUTPUT);
  digitalWrite(flash,LOW);//Desliga o flash
     
  //Configura os pinos da câmera
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  config.frame_size = FRAMESIZE_VGA;  
  config.jpeg_quality = 4;
  config.fb_count = 1;
   
  esp_err_t err = esp_camera_init(&config); //Inicialização da câmera
   
  if (err != ESP_OK) {
     
    Serial.printf("O início da câmera falhou com erro 0x%x", err);//Informa erro se a câmera não for iniciada corretamente
    delay(1000);
    ESP.restart();//Reinicia o ESP
     
  }
 
  //Inicializa o objeto de decodificação
  qr.init(&cam);
  sensor_t *s = cam.sensor();
  s->set_framesize(s, FRAMESIZE_CIF);
  s->set_whitebal(s, true);
   
  Serial.println();
  Serial.println("Aguardando código"); 
 
}

void qrcodecam();
{
  unsigned long pv_time  = millis();
  camera_fb_t *fb = cam.capture(); //Captura a imagem
  if (!fb)
  {
    Serial.println("Falha na captura da imagem");
    return;
  }
  dl_matrix3du_t *rgb888, *rgb565;
  if (cam.jpg2rgb(fb, &rgb888))
  {
    rgb565 = cam.rgb565(rgb888);
  }
  cam.clearMemory(rgb888);
  cam.clearMemory(rgb565);
  dl_matrix3du_t *image_rgb;
  if (cam.jpg2rgb(fb, &image_rgb))
  {
    cam.clearMemory(fb);
         
    qrResoult res = qr.recognition(image_rgb); //Faz decodificação da imagem contendo os dados
     
    if (res.status) //Se conseguir decodificar a imagem mostra os dados na tela
    { 
       
      if(trava == 0){
       trava = 1;
       String leitura = "Código QR Lido: " + res.payload;//Variável para mostrar os dados contidos no QR Code
       Serial.println();
       Serial.println(leitura);  //Mostra os dados no monitor serial
      }
        
    }
    else{ //Se não aguarda receber código 
        
       trava = 0;
       Serial.println();
       Serial.println("Aguardando código"); 
     }
            
    }
     
  cam.clearMemory(image_rgb); //Apaga imagem para receber uma nova imagem
}


void setup() {
  Serial.begin(9600);
  wifiConnect();
  qrcode();
}

void loop() {
  if ((WiFi.status() == WL_CONNECTED)) { // Verificar se está comectado à internet
    qrcodecam();// Insira aqui seu código. Quando quiser salvar os valores de potência utilize "salvarReciclado(registro, material, peso)"
    salvarReciclado("1234567", "ALUMINIO", 0.15); //Exemplo de envio de reciclado
    delay(10000); // Pode apagar também, esse delay só está aqui para não enviar o valor de exemplo o tempo todo

  }else {
    Serial.println("Sem conexão com a internet!");
  }
}

